//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
  providedIn: 'root'
})
export class ClientApi {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * Создание группы
   * @param body (optional) Данные новой группы
   * @return Success
   */
  createGroup(body: GroupDto | undefined): Observable<SuccessResponse> {
    let url_ = this.baseUrl + "/Group/CreateGroup";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreateGroup(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateGroup(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SuccessResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SuccessResponse>;
    }));
  }

  protected processCreateGroup(response: HttpResponseBase): Observable<SuccessResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SuccessResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Редактирование группы
   * @param body (optional) Данные группы
   * @return Success
   */
  editGroup(body: GroupDto | undefined): Observable<SuccessResponse> {
    let url_ = this.baseUrl + "/Group/EditGroup";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processEditGroup(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processEditGroup(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SuccessResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SuccessResponse>;
    }));
  }

  protected processEditGroup(response: HttpResponseBase): Observable<SuccessResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SuccessResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Удаление группы
   * @param groupId (optional) Идентификатор группы
   * @return Success
   */
  deleteGroup(groupId: number | undefined): Observable<SuccessResponse> {
    let url_ = this.baseUrl + "/Group/DeleteGroup?";
    if (groupId === null)
      throw new Error("The parameter 'groupId' cannot be null.");
    else if (groupId !== undefined)
      url_ += "groupId=" + encodeURIComponent("" + groupId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processDeleteGroup(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteGroup(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SuccessResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SuccessResponse>;
    }));
  }

  protected processDeleteGroup(response: HttpResponseBase): Observable<SuccessResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SuccessResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Получение всех групп
   * @return Success
   */
  getAllGroups(): Observable<GroupDto[]> {
    let url_ = this.baseUrl + "/Group/GetAllGroups";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllGroups(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllGroups(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GroupDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GroupDto[]>;
    }));
  }

  protected processGetAllGroups(response: HttpResponseBase): Observable<GroupDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(GroupDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Получение групп постранично
   * @param page (optional)
   * @return Success
   */
  getPagedGroups(page: number | undefined): Observable<GroupDtoPageViewData> {
    let url_ = this.baseUrl + "/Group/GetPagedGroups?";
    if (page === null)
      throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetPagedGroups(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetPagedGroups(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GroupDtoPageViewData>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GroupDtoPageViewData>;
    }));
  }

  protected processGetPagedGroups(response: HttpResponseBase): Observable<GroupDtoPageViewData> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GroupDtoPageViewData.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Создание роли
   * @param body (optional) Данные новой роли
   * @return Success
   */
  createRole(body: RoleDto | undefined): Observable<SuccessResponse> {
    let url_ = this.baseUrl + "/Role/CreateRole";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreateRole(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateRole(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SuccessResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SuccessResponse>;
    }));
  }

  protected processCreateRole(response: HttpResponseBase): Observable<SuccessResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SuccessResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Редактирование роли
   * @param body (optional) Данные роли
   * @return Success
   */
  editRole(body: RoleDto | undefined): Observable<SuccessResponse> {
    let url_ = this.baseUrl + "/Role/EditRole";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processEditRole(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processEditRole(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SuccessResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SuccessResponse>;
    }));
  }

  protected processEditRole(response: HttpResponseBase): Observable<SuccessResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SuccessResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Удаление роли
   * @param roleId (optional) Идентификатор роли
   * @return Success
   */
  deleteRole(roleId: number | undefined): Observable<SuccessResponse> {
    let url_ = this.baseUrl + "/Role/DeleteRole?";
    if (roleId === null)
      throw new Error("The parameter 'roleId' cannot be null.");
    else if (roleId !== undefined)
      url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processDeleteRole(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteRole(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SuccessResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SuccessResponse>;
    }));
  }

  protected processDeleteRole(response: HttpResponseBase): Observable<SuccessResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SuccessResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Получение всех ролей
   * @return Success
   */
  getAllRoles(): Observable<RoleDto[]> {
    let url_ = this.baseUrl + "/Role/GetAllRoles";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllRoles(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllRoles(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<RoleDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<RoleDto[]>;
    }));
  }

  protected processGetAllRoles(response: HttpResponseBase): Observable<RoleDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(RoleDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Получение ролей постранично
   * @param page (optional)
   * @return Success
   */
  getPagedRoles(page: number | undefined): Observable<RoleDtoPageViewData> {
    let url_ = this.baseUrl + "/Role/GetPagedRoles?";
    if (page === null)
      throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetPagedRoles(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetPagedRoles(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<RoleDtoPageViewData>;
        }
      } else
        return _observableThrow(response_) as any as Observable<RoleDtoPageViewData>;
    }));
  }

  protected processGetPagedRoles(response: HttpResponseBase): Observable<RoleDtoPageViewData> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoleDtoPageViewData.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorResponse.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ErrorResponse.fromJS(resultData500);
        return throwException("Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class ErrorResponse implements IErrorResponse {
  errorMessage?: string | undefined;

  constructor(data?: IErrorResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.errorMessage = _data["errorMessage"];
    }
  }

  static fromJS(data: any): ErrorResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ErrorResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["errorMessage"] = this.errorMessage;
    return data;
  }
}

export interface IErrorResponse {
  errorMessage?: string | undefined;
}

export class GroupDto implements IGroupDto {
  id?: number;
  name?: string | undefined;
  createdDateTime?: Date | undefined;
  lastUpdateDateTime?: Date | undefined;
  deletedDateTime?: Date | undefined;
  roles?: RoleDto[] | undefined;
  isSelected?: boolean;

  constructor(data?: IGroupDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
      this.lastUpdateDateTime = _data["lastUpdateDateTime"] ? new Date(_data["lastUpdateDateTime"].toString()) : <any>undefined;
      this.deletedDateTime = _data["deletedDateTime"] ? new Date(_data["deletedDateTime"].toString()) : <any>undefined;
      if (Array.isArray(_data["roles"])) {
        this.roles = [] as any;
        for (let item of _data["roles"])
          this.roles!.push(RoleDto.fromJS(item));
      }
      this.isSelected = _data["isSelected"];
    }
  }

  static fromJS(data: any): GroupDto {
    data = typeof data === 'object' ? data : {};
    let result = new GroupDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
    data["lastUpdateDateTime"] = this.lastUpdateDateTime ? this.lastUpdateDateTime.toISOString() : <any>undefined;
    data["deletedDateTime"] = this.deletedDateTime ? this.deletedDateTime.toISOString() : <any>undefined;
    if (Array.isArray(this.roles)) {
      data["roles"] = [];
      for (let item of this.roles)
        data["roles"].push(item.toJSON());
    }
    data["isSelected"] = this.isSelected;
    return data;
  }
}

export interface IGroupDto {
  id?: number;
  name?: string | undefined;
  createdDateTime?: Date | undefined;
  lastUpdateDateTime?: Date | undefined;
  deletedDateTime?: Date | undefined;
  roles?: RoleDto[] | undefined;
  isSelected?: boolean;
}

export class GroupDtoPageViewData implements IGroupDtoPageViewData {
  pageNumber?: number;
  pageSize?: number;
  totalItems?: number;
  readonly totalPages?: number;
  items?: GroupDto[] | undefined;

  constructor(data?: IGroupDtoPageViewData) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageNumber = _data["pageNumber"];
      this.pageSize = _data["pageSize"];
      this.totalItems = _data["totalItems"];
      (<any>this).totalPages = _data["totalPages"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(GroupDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GroupDtoPageViewData {
    data = typeof data === 'object' ? data : {};
    let result = new GroupDtoPageViewData();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["pageNumber"] = this.pageNumber;
    data["pageSize"] = this.pageSize;
    data["totalItems"] = this.totalItems;
    data["totalPages"] = this.totalPages;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IGroupDtoPageViewData {
  pageNumber?: number;
  pageSize?: number;
  totalItems?: number;
  totalPages?: number;
  items?: GroupDto[] | undefined;
}

export class RoleDto implements IRoleDto {
  id?: number;
  name?: string | undefined;
  createdDateTime?: Date | undefined;
  lastUpdateDateTime?: Date | undefined;
  deletedDateTime?: Date | undefined;
  groups?: GroupDto[] | undefined;
  isSelected?: boolean;

  constructor(data?: IRoleDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
      this.lastUpdateDateTime = _data["lastUpdateDateTime"] ? new Date(_data["lastUpdateDateTime"].toString()) : <any>undefined;
      this.deletedDateTime = _data["deletedDateTime"] ? new Date(_data["deletedDateTime"].toString()) : <any>undefined;
      if (Array.isArray(_data["groups"])) {
        this.groups = [] as any;
        for (let item of _data["groups"])
          this.groups!.push(GroupDto.fromJS(item));
      }
      this.isSelected = _data["isSelected"];
    }
  }

  static fromJS(data: any): RoleDto {
    data = typeof data === 'object' ? data : {};
    let result = new RoleDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
    data["lastUpdateDateTime"] = this.lastUpdateDateTime ? this.lastUpdateDateTime.toISOString() : <any>undefined;
    data["deletedDateTime"] = this.deletedDateTime ? this.deletedDateTime.toISOString() : <any>undefined;
    if (Array.isArray(this.groups)) {
      data["groups"] = [];
      for (let item of this.groups)
        data["groups"].push(item.toJSON());
    }
    data["isSelected"] = this.isSelected;
    return data;
  }
}

export interface IRoleDto {
  id?: number;
  name?: string | undefined;
  createdDateTime?: Date | undefined;
  lastUpdateDateTime?: Date | undefined;
  deletedDateTime?: Date | undefined;
  groups?: GroupDto[] | undefined;
  isSelected?: boolean;
}

export class RoleDtoPageViewData implements IRoleDtoPageViewData {
  pageNumber?: number;
  pageSize?: number;
  totalItems?: number;
  readonly totalPages?: number;
  items?: RoleDto[] | undefined;

  constructor(data?: IRoleDtoPageViewData) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageNumber = _data["pageNumber"];
      this.pageSize = _data["pageSize"];
      this.totalItems = _data["totalItems"];
      (<any>this).totalPages = _data["totalPages"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(RoleDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): RoleDtoPageViewData {
    data = typeof data === 'object' ? data : {};
    let result = new RoleDtoPageViewData();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["pageNumber"] = this.pageNumber;
    data["pageSize"] = this.pageSize;
    data["totalItems"] = this.totalItems;
    data["totalPages"] = this.totalPages;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IRoleDtoPageViewData {
  pageNumber?: number;
  pageSize?: number;
  totalItems?: number;
  totalPages?: number;
  items?: RoleDto[] | undefined;
}

export class SuccessResponse implements ISuccessResponse {
  responseMessage?: string | undefined;

  constructor(data?: ISuccessResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.responseMessage = _data["responseMessage"];
    }
  }

  static fromJS(data: any): SuccessResponse {
    data = typeof data === 'object' ? data : {};
    let result = new SuccessResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["responseMessage"] = this.responseMessage;
    return data;
  }
}

export interface ISuccessResponse {
  responseMessage?: string | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
